<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 
		"-//mybatis.org//DTD Mapper 3.0 //EN"
		"https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- mapper의 namespace는 연결할 dao 인터페이스의 풀네임을 작성한다. -->
<mapper namespace="com.itbank.repository.ReserveDAO">

	<select id="selectList" resultType="camping">
		select
		*
		from
		camping c
		join
		reserve r on r.camping_idx = c.camping_idx

	</select>


	<!-- CampingDTO selectOne(HashMap<String, Object> param); -->
	<!-- 예약전 -->
	<select id="selectOne" resultType="camping" parameterType="int">
		select
		c.camping_idx, c.facltnm,
		cs.siteMg1Co, cs.siteMg2Co, cs.siteMg3Co, cs.siteMg1_price, cs.siteMg2_price,
		cs.siteMg3_price,
		ci.sitebottomcl1, ci.sitebottomcl2, ci.sitebottomcl3, ci.sitebottomcl4,
		ci.sitebottomcl5
		from camping_site cs
		join camping c on c.camping_idx = cs.camping_idx
		join camping_introduce ci on cs.camping_idx = ci.camping_idx
		where cs.camping_idx = #{camping_idx}
		<!-- 사이트갯수 -->
	</select>

	<select id="selectA" resultType="int" parameterType="hashmap">
	  <![CDATA[
	    SELECT COUNT(*) FROM reserve 
	    WHERE camping_idx = #{camping_idx} 
	    AND TO_CHAR(reserve_str_date, 'yyyy-mm-dd') <= #{reserve_str_date}
	    AND TO_CHAR(reserve_end_date, 'yyyy-mm-dd') >= #{reserve_end_date}
	    AND reserve_site = 'a사이트'
	  ]]>
	</select>

	<select id="selectB" resultType="int" parameterType="hashmap">
	  <![CDATA[
	    SELECT COUNT(*) FROM reserve 
	    WHERE camping_idx = #{camping_idx} 
	    AND TO_CHAR(reserve_str_date, 'yyyy-mm-dd') <= #{reserve_str_date}
	    AND TO_CHAR(reserve_end_date, 'yyyy-mm-dd') >= #{reserve_end_date}
	    AND reserve_site = 'b사이트'
	  ]]>
	</select>


	<select id="selectC" resultType="int" parameterType="hashmap">
	  <![CDATA[
	    SELECT COUNT(*) FROM reserve 
	    WHERE camping_idx = #{camping_idx} 
	    AND TO_CHAR(reserve_str_date, 'yyyy-mm-dd') <= #{reserve_str_date}
	    AND TO_CHAR(reserve_end_date, 'yyyy-mm-dd') >= #{reserve_end_date}
	    AND reserve_site = 'c사이트'
	  ]]>
	</select>

	<!-- select, update, insert, delete의 id는 인터페이스 내부 함수 이름을 지정한다. -->
	<!-- parameterType 속성은 매개변수의 자료형을 작성한다. -->
	<!-- resultType 속성은 반환자료형을 작성한다. -->
	<!-- 단, insert, update, delete는 반환형이 int로 고정이기 때문에, 별도로 작성하지 않는다. -->
	<insert id="reservation" parameterType="reserve">
		insert into reserve
		(
		user_idx,
		camping_idx,
		reserve_site,
		reserve_price,
		reserve_str_date,
		reserve_end_date,
		car_cnt,
		human_cnt
		)

		values
		(
		#{user_idx},
		#{camping_idx},
		#{reserve_site},
		#{reserve_price},
		#{reserve_str_date},
		#{reserve_end_date},
		#{car_cnt},
		#{human_cnt}
		)

	</insert>


	<!-- 예약자확인 -->
	<select id="reserveOne" resultType="reserve" parameterType="int">

		select
		*
		from
		reserve r
		join user_table ut on r.user_idx = ut.user_idx
		join camping c on r.camping_idx = c.camping_idx
		where
		r.reserve_idx = #{reserve_idx}
	</select>


	<!-- 예약이 되면 site개수 빼기 -->


	<update id="paymentByOne" parameterType="int">
		update reserve set
		payment = '1'
		where reserve_idx = #{reserve_idx}
	</update>

	<select id="getMaxReserveIdx" resultType="int">
		select max(reserve_idx) from reserve
	</select>

	<!-- <update id="minuseSiteCo" parameterType="reserve"> -->
	<!-- update -->
	<!-- camping_site -->
	<!-- set -->
	<!-- <if test="reserve_site == 'a사이트'"> -->
	<!-- sitemg1co = sitemg1co - 1 -->
	<!-- </if> -->
	<!-- <if test="reserve_site == 'b사이트'"> -->
	<!-- sitemg2co = sitemg2co - 1 -->

	<!-- </if> -->
	<!-- <if test="reserve_site == 'c사이트'"> -->
	<!-- sitemg3co = sitemg3co - 1 -->
	<!-- </if> -->
	<!-- where camping_idx = #{camping_idx} -->
	<!-- </update> -->






</mapper>